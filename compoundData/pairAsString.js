/*
Task:
    Пару можно создать на основе строки. Для хранения двух значений применим разделитель.
    Им может выступить любой символ, однако во избежание совпадений с исходными данными лучше взять редко используемое значение.
    Для этого подойдёт так называемая управляющая или escape-последовательность, которая начинается с обратной косой черты.
    Мы будем использовать специальный символ \0, обозначающий нулевой символ (NUL).
    Функции car и cdr должны получить содержимое строки до и после разделителя соответственно.
    Управляющая последовательность воспринимается интерпретатором как одиночный символ, т.е. имеет длину, равную 1.
    Обязательным условием является отсутствие данного символа в строках, которые объединяются в пару.

    pairs.js
    Реализуйте и экспортируйте следующие функции в соответствии с алгоритмом выше:

    cons
    car
    cdr
*/


// Solution:

const length = str => str.length;

export const cons = (str1, str2) => `${str1}\0${str2}`;

export const car = (pair) => {
  const iter = (acc, i) => {
    if (pair[i] === '\0') {
      return acc;
    }
    return iter(`${acc}${pair[i]}`, i + 1);
  };
  return iter('', 0);
};

export const cdr = (pair) => {
  const iter = (acc, i) => {
    if (pair[i] === '\0') {
      return acc;
    }
    return iter(`${pair[i]}${acc}`, i - 1);
  };
  return iter('', length(pair) - 1);
};

const pair = cons('computer', 'science'); // => computer\0science
car(pair); // computer
cdr(pair); // science
